{"version":3,"sources":["webpack:///src/app/forecast-module/forecast.routing.ts","webpack:///src/app/forecast-module/config/index.ts","webpack:///src/app/forecast-module/services/weather-api.service.ts","webpack:///src/app/forecast-module/components/index.ts","webpack:///src/app/forecast-module/forecast.module.ts","webpack:///src/app/forecast-module/pipes/toCelsius.pipe.ts","webpack:///src/app/forecast-module/pipes/index.ts","webpack:///src/app/forecast-module/config/weather-api.config.ts","webpack:///src/app/forecast-module/components/forecast-page/forecast-page.component.ts","webpack:///src/app/forecast-module/components/forecast-detailed/forecast-detailed.component.html","webpack:///src/app/forecast-module/components/forecast-page/forecast-page.component.html","webpack:///src/app/forecast-module/services/index.ts","webpack:///src/app/forecast-module/components/multi-day-forecast-page/multi-day-forecast-page.component.ts","webpack:///src/app/forecast-module/components/multi-day-forecast-page/multi-day-forecast-page.component.html","webpack:///src/app/forecast-module/services/forecast.service.ts","webpack:///src/app/forecast-module/components/forecast-detailed/forecast-detailed.component.ts"],"names":["routes","path","pathMatch","component","data","days","ForecastRoutingModule","imports","forChild","WeatcherApiService","weatherApiConfigs","http","zipCode","url","apiUrl","appId","get","ForecastModule","declarations","providers","provide","useValue","exports","ToCelsiusPipe","fahrenheitTemp","Math","round","name","WEATHER_API_CONFIG","ForecastPageComponent","forecastService","zipcodeInputValue","addNewZipCode","console","warn","forecast","removeZipCode","addedZipCodes$","selector","template","defaultDaysForForecast","MultiDayForecastPageComponent","activatedRoute","forecastDetails","isLoading","daysLength","snapshot","routeZipCode","paramMap","length","getForecastForDays","subscribe","resp","err","error","forecastStorageKey","ForecastService","dataService","weatherApi","forecastData","loadForecastFromStorage","currentZipCodes","getData","indexOf","push","saveData","getCurrentWeatherByZipCode","loadedData","addNewForecast","onForecastError","usedIndex","splice","filter","f","next","getMultipleDaysWeatherByZipCode","pipe","currentDay","Date","setHours","resultArray","previousDate","list","respDay","respDayDate","dt","diffTime","abs","diffDays","ceil","find","date","locationName","city","currentConditions","weather","main","maxToday","temp_max","minToday","temp_min","temperature","temp","existingZipCodesData","status","ForecastDetailedComponent","close","emit"],"mappings":"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","file":"forecast-module-forecast-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n// Components\r\nimport {\r\n    ForecastPageComponent,\r\n    MultiDayForecastPageComponent,\r\n} from './components';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        component: ForecastPageComponent,\r\n    },\r\n    {\r\n        path: ':zipCode',\r\n        component: MultiDayForecastPageComponent,\r\n        data: {\r\n            days: 5\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)] })\r\nexport class ForecastRoutingModule { }\r\n","export * from './weather-api.config';\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n// Locals\r\nimport { WeatherMultipleDayResponseData, WeatherResponseData } from '../models';\r\nimport { WEATHER_API_CONFIG, WeatherApiConfigParams } from '../config';\r\n\r\n@Injectable()\r\nexport class WeatcherApiService {\r\n\r\n    constructor(\r\n        @Inject(WEATHER_API_CONFIG) private readonly weatherApiConfigs: WeatherApiConfigParams,\r\n        private readonly http: HttpClient\r\n    ) {\r\n    }\r\n\r\n    getCurrentWeatherByZipCode(zipCode: string): Observable<WeatherResponseData> {\r\n        const url = `http://${this.weatherApiConfigs.apiUrl}/weather?zip=${zipCode}&appid=${this.weatherApiConfigs.appId}`;\r\n        return this.http.get<WeatherResponseData>(url);\r\n    }\r\n\r\n    getMultipleDaysWeatherByZipCode(zipCode: string): Observable<WeatherMultipleDayResponseData> {\r\n        const url = `http://${this.weatherApiConfigs.apiUrl}/forecast?zip=${zipCode}&appid=${this.weatherApiConfigs.appId}`;\r\n        return this.http.get<WeatherMultipleDayResponseData>(url);\r\n    }\r\n}\r\n","export * from './forecast-page/forecast-page.component';\r\nexport * from './multi-day-forecast-page/multi-day-forecast-page.component';\r\nexport * from './forecast-detailed/forecast-detailed.component';\r\n","import { NgModule } from '@angular/core';\r\n// Routes\r\nimport { ForecastRoutingModule } from './forecast.routing';\r\n// Modules\r\nimport { SharedModule } from '../shared-module/shared.module';\r\n// Locals\r\nimport {\r\n    ForecastPageComponent,\r\n    MultiDayForecastPageComponent,\r\n    ForecastDetailedComponent,\r\n} from './components';\r\nimport {\r\n    ForecastService,\r\n    WeatcherApiService,\r\n} from './services';\r\nimport { WEATHER_API_CONFIG, WeatherApiConfigParams } from './config';\r\nimport * as pipes from './pipes';\r\n\r\n@NgModule({\r\n    imports: [\r\n        SharedModule,\r\n        ForecastRoutingModule,\r\n    ],\r\n    declarations: [\r\n        // Pages\r\n        ForecastPageComponent,\r\n        MultiDayForecastPageComponent,\r\n        // Components\r\n        ForecastDetailedComponent,\r\n        // pipes\r\n        pipes.ToCelsiusPipe,\r\n    ],\r\n    providers: [\r\n        ForecastService,\r\n        WeatcherApiService,\r\n        { provide: WEATHER_API_CONFIG, useValue: { apiUrl: 'api.openweathermap.org/data/2.5', appId: '5a4b2d457ecbef9eb2a71e480b947604' } as WeatherApiConfigParams }\r\n    ],\r\n    exports: [\r\n\r\n    ]\r\n})\r\nexport class ForecastModule { }\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'toCelsius',\r\n})\r\nexport class ToCelsiusPipe implements PipeTransform {\r\n    transform(fahrenheitTemp: number, ...args: any[]) {\r\n        return Math.round(fahrenheitTemp - 273);\r\n    }\r\n}\r\n","export * from './toCelsius.pipe';\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const WEATHER_API_CONFIG = new InjectionToken<WeatherApiConfigParams>('WEATHER_API_CONFIG');\r\n\r\nexport interface WeatherApiConfigParams {\r\n    apiUrl: string;\r\n    appId: string;\r\n}","import { Component, OnDestroy } from \"@angular/core\";\r\nimport { Observable, Subscription } from \"rxjs\";\r\nimport { IForecastData } from \"../../models\";\r\n// Locals\r\nimport { ForecastService } from \"../../services\";\r\n\r\n@Component({\r\n    selector: 'app-forecast-page',\r\n    templateUrl: './forecast-page.component.html',\r\n    styleUrls: []\r\n})\r\nexport class ForecastPageComponent {\r\n\r\n    zipcodeInputValue: string;\r\n\r\n    get zipCodesForecast$(): Observable<IForecastData[]> {\r\n        return this.forecastService.addedZipCodes$;\r\n    }\r\n\r\n    constructor(\r\n        public readonly forecastService: ForecastService,\r\n    ) {\r\n    }\r\n\r\n    // events\r\n    onAddLocationClicked(): void {\r\n        if (this.zipcodeInputValue) {\r\n            this.forecastService.addNewZipCode(this.zipcodeInputValue);\r\n        } else {\r\n            console.warn('We can\\'t add empyt zip code!');\r\n        }\r\n    }\r\n\r\n    onDeleteForecast(forecast: IForecastData): void {\r\n        this.forecastService.removeZipCode(forecast.zipCode);\r\n    }\r\n}","export default \"<div class=\\\"well flex\\\">\\r\\n    <div>\\r\\n        <h3>{{forecast.locationName}} ({{forecast.zipCode}})</h3>\\r\\n        <h4>Current conditions: {{ forecast.currentConditions }}</h4>\\r\\n        <h4>Temperatures today:</h4>\\r\\n        <p>\\r\\n            Current <b>{{forecast.temperature | toCelsius}}</b>\\r\\n        </p>\\r\\n        <p>\\r\\n            Max <b>{{forecast.maxToday | toCelsius}}</b>\\r\\n        </p>\\r\\n        <p>\\r\\n            Min <b>{{forecast.minToday | toCelsius}}</b>\\r\\n        </p>\\r\\n        <p>\\r\\n            <a [routerLink]=\\\"['/forecast', forecast.zipCode]\\\">Show 5-day forecast for Rancho Cordova</a>\\r\\n        </p>\\r\\n    </div>\\r\\n    <div>\\r\\n        <span class=\\\"close\\\" (click)=\\\"onClose()\\\">×</span>\\r\\n        <app-weather-icon [weatherName]=\\\"forecast.currentConditions\\\"></app-weather-icon>\\r\\n    </div>\\r\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\r\\n\\r\\n    <div class=\\\"well\\\">\\r\\n        <h2>Enter a zipcode:</h2>\\r\\n        <input class=\\\"form-control\\\" placeholder=\\\"Zipcode\\\" type=\\\"text\\\" [(ngModel)]=\\\"zipcodeInputValue\\\">\\r\\n        <br>\\r\\n        <button class=\\\"btn btn-primary\\\" (click)=\\\"onAddLocationClicked()\\\">\\r\\n        Add location\\r\\n      </button>\\r\\n    </div>\\r\\n    <div>\\r\\n        <app-forecast-detailed *ngFor=\\\"let forecast of zipCodesForecast$ | async\\\" [forecast]=\\\"forecast\\\" (close)=\\\"onDeleteForecast($event)\\\"></app-forecast-detailed>\\r\\n    </div>\\r\\n</div>\";","export * from './forecast.service';\r\nexport * from './weather-api.service';\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n// Locals\r\nimport { ForecastService } from \"../../services\";\r\n\r\nconst defaultDaysForForecast = 5;\r\n\r\n@Component({\r\n    selector: 'app-multi-day-forecast-page',\r\n    templateUrl: './multi-day-forecast-page.component.html',\r\n    styleUrls: []\r\n})\r\nexport class MultiDayForecastPageComponent implements OnInit {\r\n    readonly daysLength: number;\r\n    forecastDetails = [];\r\n    isLoading = false;\r\n\r\n    constructor(\r\n        private readonly activatedRoute: ActivatedRoute,\r\n        private readonly forecastService: ForecastService,\r\n    ) {\r\n        this.daysLength = this.activatedRoute.snapshot.data.days || defaultDaysForForecast;\r\n    }\r\n\r\n    ngOnInit() {\r\n        const routeZipCode = this.activatedRoute.snapshot.paramMap.get('zipCode');\r\n        if (routeZipCode && routeZipCode.length) {\r\n            this.isLoading = true;\r\n            this.forecastService\r\n                .getForecastForDays(routeZipCode, this.daysLength)\r\n                .subscribe(\r\n                    resp => this.forecastDetails = resp,\r\n                    (err) => console.error(err),\r\n                    () => this.isLoading = false);\r\n        } else {\r\n            console.error(`Zip code is missed! We can't show you forecast`);\r\n        }\r\n    }\r\n}","export default \"<h4>Template for {{daysLength}}-day forecast page:</h4>\\r\\n<div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"panel panel-default\\\">\\r\\n        <div class=\\\"panel-heading\\\">\\r\\n            <h3 class=\\\"panel-title\\\">{{daysLength}}-day forecast for Rancho Cordova</h3>\\r\\n        </div>\\r\\n        <app-loading-indicator *ngIf=\\\"isLoading\\\"></app-loading-indicator>\\r\\n        <ul class=\\\"list-group\\\">\\r\\n            <!---->\\r\\n            <li class=\\\"list-group-item\\\" *ngFor=\\\"let forecast of forecastDetails\\\">\\r\\n                {{forecast.date | date: 'EEEE'}}: {{forecast.currentConditions}} - Min: {{forecast.minToday | toCelsius}} - Max: {{forecast.maxToday | toCelsius}}\\r\\n\\r\\n                <app-weather-icon class=\\\"icon\\\" [weatherName]=\\\"forecast.currentConditions\\\"></app-weather-icon>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n    <button class=\\\"btn btn-success\\\" tabindex=\\\"0\\\" [routerLink]=\\\"['../']\\\">&lt; Back to main page</button>\\r\\n</div>\";","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n// Locals\r\nimport { StorageService } from 'src/app/core-module/services';\r\nimport { IForecastData, WeatherResponseData } from '../models';\r\nimport { WeatcherApiService } from './weather-api.service';\r\n\r\nconst forecastStorageKey = 'forecast-zip-codes';\r\n\r\n@Injectable()\r\nexport class ForecastService {\r\n    readonly addedZipCodes$ = new ReplaySubject<IForecastData[]>(1);\r\n    private forecastData: IForecastData[] = [];\r\n\r\n    constructor(\r\n        private readonly dataService: StorageService,\r\n        private readonly weatherApi: WeatcherApiService,\r\n    ) {\r\n        this.loadForecastFromStorage();\r\n    }\r\n\r\n    addNewZipCode(zipCode: string): void {\r\n        const currentZipCodes = this.dataService.getData<string[]>(forecastStorageKey) || [];\r\n        // make sure we have only unique zip codes\r\n        if (currentZipCodes.indexOf(zipCode) < 0) {\r\n            // add new value\r\n            currentZipCodes.push(zipCode);\r\n            this.dataService.saveData(forecastStorageKey, currentZipCodes);\r\n            this.weatherApi.getCurrentWeatherByZipCode(zipCode)\r\n                .subscribe(\r\n                    loadedData => this.addNewForecast(zipCode, loadedData),\r\n                    err => this.onForecastError(zipCode, err));\r\n        }\r\n    }\r\n\r\n    removeZipCode(zipCode: string): void {\r\n        const currentZipCodes = this.dataService.getData<string[]>(forecastStorageKey) || [];\r\n        const usedIndex = currentZipCodes.indexOf(zipCode);\r\n        if (usedIndex >= 0) {\r\n            // remove existing zip-code\r\n            currentZipCodes.splice(usedIndex, 1);\r\n            this.dataService.saveData(forecastStorageKey, currentZipCodes);\r\n            this.forecastData = this.forecastData.filter(f => f.zipCode !== zipCode);\r\n            this.addedZipCodes$.next(this.forecastData);\r\n        }\r\n    }\r\n\r\n    getForecastForDays(zipCode: string, days: number): Observable<IForecastData[]> {\r\n        return this.weatherApi.getMultipleDaysWeatherByZipCode(zipCode)\r\n            .pipe(map(resp => {\r\n                const currentDay = new Date().setHours(0, 0, 0, 0);\r\n                const resultArray: IForecastData[] = [];\r\n                let previousDate = null;\r\n                for (const respDay of resp.list) {\r\n                    const respDayDate = new Date(respDay.dt * 1000).setHours(0, 0, 0, 0);\r\n                    const diffTime = Math.abs(respDayDate - currentDay);\r\n                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n                    if (diffDays >= days) {\r\n                        break;\r\n                    }\r\n                    previousDate = new Date(respDay.dt * 1000).setHours(0, 0, 0, 0);\r\n                    // TODO do I need to make totals?\r\n                    if (!resultArray.find(f => f.date === previousDate)) {\r\n                        resultArray.push({\r\n                            zipCode: zipCode,\r\n                            // Loaded\r\n                            locationName: resp.city.name,\r\n                            currentConditions: respDay.weather[0].main,\r\n                            maxToday: respDay.main.temp_max,\r\n                            minToday: respDay.main.temp_min,\r\n                            temperature: respDay.main.temp,\r\n                            date: previousDate,\r\n                        });\r\n                    }\r\n                }\r\n                return resultArray;\r\n            }));\r\n    }\r\n\r\n    private loadForecastFromStorage(): void {\r\n        const existingZipCodesData = this.dataService.getData<string[]>(forecastStorageKey);\r\n        if (existingZipCodesData) {\r\n            for (const zipCode of existingZipCodesData) {\r\n                this.weatherApi.getCurrentWeatherByZipCode(zipCode)\r\n                    .subscribe(\r\n                        loadedData => this.addNewForecast(zipCode, loadedData),\r\n                        err => this.onForecastError(zipCode, err));\r\n            }\r\n        }\r\n    }\r\n\r\n    private addNewForecast(zipCode: string, loadedData: WeatherResponseData): void {\r\n        if (loadedData && loadedData.weather && loadedData.weather.length) {\r\n            this.forecastData.push({\r\n                zipCode: zipCode,\r\n                // Loaded\r\n                locationName: loadedData.name,\r\n                currentConditions: loadedData.weather[0].main,\r\n                maxToday: loadedData.main.temp_max,\r\n                minToday: loadedData.main.temp_min,\r\n                temperature: loadedData.main.temp,\r\n                date: loadedData.dt * 1000,\r\n            });\r\n            this.addedZipCodes$.next(this.forecastData);\r\n        } else {\r\n            console.warn('Got incorrect forecast response');\r\n        }\r\n    }\r\n\r\n    private onForecastError(zipCode: string, err: HttpErrorResponse): void {\r\n        if (err.status === 404) {\r\n            // incorrect zip code\r\n            // just remove it\r\n            this.removeZipCode(zipCode);\r\n            console.warn(`ZipCode=${zipCode} can't be found, we will delete it from your storage!`);\r\n        }\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\n// Locals\r\nimport { IForecastData } from \"../../models\";\r\n\r\n@Component({\r\n    selector: 'app-forecast-detailed',\r\n    templateUrl: './forecast-detailed.component.html',\r\n    styleUrls: []\r\n})\r\nexport class ForecastDetailedComponent {\r\n    @Input()\r\n    forecast: IForecastData;\r\n\r\n    @Output()\r\n    close = new EventEmitter<IForecastData>();\r\n\r\n    // events\r\n    onClose() {\r\n        this.close.emit(this.forecast);\r\n    }\r\n}"]}